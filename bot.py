import asyncio
import logging
from time import sleep
import os
from aiogram import Bot, Dispatcher, executor
from aiogram.dispatcher import DEFAULT_RATE_LIMIT
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.utils.exceptions import Throttled
from aiogram import types
from config import *
from random import *
import db1
from aiogram.types.message import ContentTypes
from aiogram.types import ContentType, Message
from aiogram.types import InputFile
from aiogram.dispatcher.filters import Command
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class Mydialog(StatesGroup):
    otvet = State()
class Mydialog1(StatesGroup):
    otvet1 = State()
class Mydialog2(StatesGroup):
    otvet2 = State()
class Mydialog3(StatesGroup):
    otvet3 = State()
class Mydialog4(StatesGroup):
    set_card = State()
class Mydialog5(StatesGroup):
    fio = State()
class Mydialog6(StatesGroup):
    message = State()
    



@dp.message_handler(commands="start")
async def start(message: types.Message):
    confirm_status = db1.get_confirm_status(message.chat.id)

    if confirm_status is None:
        db1.add_user(message.chat.id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="zaya"))
        await message.answer("üíé–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ UA.SCUM Syndicate!üíé\n\nü¶£–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π –ø–æ —Ä—É—Å—Å–∫–∏–º –º–∞–º–æ–Ω—Ç–∞–º. –ß–ª–µ–Ω–∞–º –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ª—É—á—à–∏–º –º–∞–Ω—É–∞–ª–∞–º, –±–æ—Ç–∞–º, –æ–≥—Ä–æ–º–Ω—ã–º –ø–∞–∫–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n‚è≥–ü–æ–¥–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è, –≤—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏\n\n‚ùï–ù–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∂–¥—ë–º —á–µ—Å—Ç–Ω—ã—Ö –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", reply_markup=keyboard)
    else:
        if confirm_status == 1:
            await message.answer('–í—ã —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.')
        elif confirm_status == 0:
            await message.answer('–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—Éüö∑\n\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n–ó–∞—è–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º, —Å 10:00 –¥–æ 23:00. –í —Å–ª—É—á–∞–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤, –Ω–∞–ø–∏—à–∏—Ç–µ @CEO_uascm‚ùï!')


@dp.callback_query_handler(text="zaya")
async def send_start(call: types.CallbackQuery):
    await call.message.edit_text('1Ô∏è‚É£ –ó–Ω–∞–∫–æ–º—ã –ª–∏ –≤—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–∫–∞–º–∞, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã? –ï—Å–ª–∏ –¥–∞, –ø—Ä–æ—Å—å–±–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥‚ùï')
    await Mydialog.otvet.set()
    
@dp.message_handler(state=Mydialog.otvet)
async def process_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        user_message = data['text']
        db1.add_text1(user_message, message.chat.id, None)
        await state.finish()

    await message.reply('2Ô∏è‚É£ –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ? –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –æ—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏‚ùï')
    await Mydialog1.otvet1.set()
@dp.message_handler(content_types=ContentTypes.PHOTO,state=Mydialog.otvet)
async def message_photo_2(message : types.Message, state: FSMContext):
    db1.add_text1(message['caption'], message.chat.id, message.photo[0]['file_id'])
    await state.finish()
    await Mydialog1.otvet1.set()
    await message.reply('2Ô∏è‚É£ –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ? –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –æ—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏‚ùï')
    
@dp.message_handler(state=Mydialog1.otvet1)
async def process_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data1:
        print(message)
        db1.add_text2(db1.get_text1(message.chat.id), message.text, message.chat.id, db1.get_photo(message.chat.id))
        await state.finish()
        await Mydialog2.otvet2.set()
        await message.reply(f'3Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–µ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ?‚ùï')
        

@dp.message_handler(state=Mydialog2.otvet2)
async def process_message(message: types.Message, state: FSMContext):
    message.chat.id = int(message.chat.id)
    async with state.proxy() as data2:
        data2['text'] = message.text
        user_message2 = data2['text']
        db1.add_text3(db1.get_text1(message.chat.id), db1.get_text2(message.chat.id), user_message2, message.chat.id, db1.get_photo(message.chat.id))
        await message.reply('4Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ —Ü–µ–ª–∏ –≤—ã –ø—Ä–∏—Å–ª–µ–¥—É–µ—Ç–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã?‚ùï')
        await state.finish()
        await Mydialog3.otvet3.set()

@dp.message_handler(state=Mydialog3.otvet3)
async def process_message(message: types.Message, state: FSMContext):
    user_id = int(message.from_user.id)
    db1.add_text4(db1.get_text1(message.chat.id), db1.get_text2(message.chat.id), db1.get_text3(message.chat.id),message.text, message.chat.id, db1.get_photo(message.chat.id))
    await message.reply('üì§ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n‚ùóÔ∏è–ü—Ä–∏–Ω–∏–º–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫')
    await state.finish()
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    but1 = types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"prin_{message.from_user.id}")
    but2 = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"otkl_{message.from_user.id}")

    keyboard.add(but1, but2)
  
    if db1.get_photo(message.chat.id) == None:
        await bot.send_message(chat_id=admin_user_id, text=f'<a href="tg://user?id={message.chat.id}">{message.from_user.first_name}</a> –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É! –ï–≥–æ –¥–∞–Ω–Ω—ã–µ:\n1Ô∏è‚É£ –ï—Å–ª–∏ –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?‚ùï\n {db1.get_text1(message.chat.id)}\n\n2Ô∏è‚É£ –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ?‚ùï\n {db1.get_text2(message.chat.id)}\n\n3Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é/–¥–µ–Ω—å –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É?\n - {db1.get_text3(message.chat.id)}\n\n4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π?‚ùï\n {message.text}',parse_mode='HTML', reply_markup=keyboard)
    else:
        await bot.send_photo(chat_id=admin_user_id, photo=db1.get_photo(message.chat.id), caption=f'<a href="tg://user?id={message.chat.id}">{message.from_user.first_name}</a> –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É! –ï–≥–æ –¥–∞–Ω–Ω—ã–µ:\n1Ô∏è‚É£ –ï—Å–ª–∏ –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?‚ùï\n {db1.get_text1(message.chat.id)}\n\n2Ô∏è‚É£ –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ?‚ùï\n {db1.get_text2(message.chat.id)}\n\n3Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é/–¥–µ–Ω—å –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É?\n - {db1.get_text3(message.chat.id)}\n\n4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π?‚ùï\n {message.text}',parse_mode='HTML', reply_markup=keyboard)




    @dp.callback_query_handler(text_startswith=f"prin_{message.from_user.id}")
    async def send_prin(call: types.CallbackQuery):

        db1.add_confirm(message.chat.id, db1.get_text2(message.chat.id), db1.get_text3(message.chat.id), message.text,
                        message.chat.id, 1, db1.get_photo(message.chat.id))
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É

        cont_key = InlineKeyboardButton (text="‚úÖ–ü–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫—É", callback_data="cont_key")

        keyboard.add(cont_key)

        await bot.send_message(
         chat_id=user_id,
          text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–æ–º–∞–Ω–¥—É UA.SCUM Syndicate. –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏–¥–µ–æ—É—Ä–æ–∫, –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∞–∑–æ–≤ —Ä–∞–±–æ—Ç—ã!",
          reply_markup=keyboard
         )

        await call.message.delete()


    @dp.callback_query_handler(text_startswith=f"otkl_{message.from_user.id}")
    async def send_otkl(call: types.CallbackQuery):
        user_id = int(call.data.split("_")[1])
        db1.add_confirm(message.chat.id, db1.get_text2(message.chat.id), db1.get_text3(message.chat.id),message.text, message.chat.id, 2, db1.get_photo(message.chat.id))
        await bot.send_message(chat_id=user_id, text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞‚ùå\n\n–í–∏–¥–∏–º–æ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ. –ú–æ–∂–µ—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö @USS_HOST.ü§î")
        await call.message.delete()
    

@dp.callback_query_handler(text_startswith="cont_key") #–≤–∏–¥–µ–æ 1
async def continue_to_lesson(call: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id
    
    # –®–∞–≥ 1: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
    await call.message.delete()

    # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—Ä—É–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è
    video_note_path = "vid1.mp4"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—é
    with open(video_note_path, "rb") as video_note:
        await bot.send_video_note(chat_id=user_id, video_note=video_note)

        # –®–∞–≥ 3: –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(15)

        # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–Ω–æ–ø–∫–æ–π
        keyboard = InlineKeyboardMarkup(row_width=1)
        button_text = InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="1cont_key")
        keyboard.add(button_text)

        await bot.send_message(
            chat_id=user_id,
            text="–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!",
            reply_markup=keyboard
        )

@dp.callback_query_handler(text_startswith="1cont_key") #–≤–∏–¥–µ–æ 2
async def continue_to_lesson_1(call: types.CallbackQuery):
    await call.message.delete()
    video_note_path = "vid2.mp4"
    with open(video_note_path, "rb") as video_note:
        await bot.send_video_note(chat_id=call.from_user.id, video_note=video_note)
        await asyncio.sleep(15)
        keyboard = InlineKeyboardMarkup(row_width=1)
        button_text = InlineKeyboardButton(text="–î–∞–ª—å—à–µ üëâ", callback_data="2cont_key")
        keyboard.add(button_text)
        await bot.send_message(
            chat_id=call.from_user.id,
            text="„Ö§",
            reply_markup=keyboard
        )

@dp.callback_query_handler(text_startswith="2cont_key") #–≤–∏–¥–µ–æ 3
async def continue_to_lesson_2(call: types.CallbackQuery):
    await call.message.delete()
    video_note_path = "vid3.mp4"
    with open(video_note_path, "rb") as video_note:
        await bot.send_video_note(chat_id=call.from_user.id, video_note=video_note)
        await asyncio.sleep(15)
        keyboard = InlineKeyboardMarkup(row_width=1)
        button_text = InlineKeyboardButton(text="–î–∞–ª—å—à–µ üëâ", callback_data="3cont_key")
        keyboard.add(button_text)
        await bot.send_message(
            chat_id=call.from_user.id,
            text="„Ö§",
            reply_markup=keyboard
        )

@dp.callback_query_handler(text_startswith="3cont_key") #–≤–∏–¥–µ–æ 4
async def continue_to_lesson_3(call: types.CallbackQuery):
    await call.message.delete()
    video_note_path = "vid4.mp4"
    with open(video_note_path, "rb") as video_note:
        await bot.send_video_note(chat_id=call.from_user.id, video_note=video_note)
        await asyncio.sleep(15)
        keyboard = InlineKeyboardMarkup(row_width=1)
        button_text = InlineKeyboardButton(text="–î–∞–ª—å—à–µ üëâ", callback_data="4cont_key")
        keyboard.add(button_text)
        await bot.send_message(
            chat_id=call.from_user.id,
            text="„Ö§",
            reply_markup=keyboard
        )

@dp.callback_query_handler(text_startswith="4cont_key")  #–≤–∏–¥–µ–æ 5
async def continue_to_lesson_4(call: types.CallbackQuery):
    await call.message.delete()
    video_note_path = "vid5.mp4"
    with open(video_note_path, "rb") as video_note:
        await bot.send_video_note(chat_id=call.from_user.id, video_note=video_note)
        await asyncio.sleep(15)
        keyboard = InlineKeyboardMarkup(row_width=1)
        button_text = InlineKeyboardButton(text="‚úÖ –û—Ç–∫—Ä—ã—Ç—å WORK –º–µ–Ω—é", callback_data="work_menu")
        keyboard.add(button_text)
        await bot.send_message(
            chat_id=call.from_user.id,
            text="–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ, –º–æ–∂–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!",
            reply_markup=keyboard
        )



def create_work_menu_keyboard(): #–°–æ–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –í–û–†–ö –ú–ï–ù–Æ
    keyboard = InlineKeyboardMarkup(row_width=2)
    button_manuals = InlineKeyboardButton(text="üìö–ú–∞–Ω—É–∞–ª—ã", url="https://t.me/+4YDLWB0QqXc2MWYy")
    button_chat = InlineKeyboardButton(text="üí¨–ß–∞—Ç", url="https://t.me/+rsSUyQd1rCA5ODhi")
    button_bots = InlineKeyboardButton(text="üõ†–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="tools")
    button_work_bots = InlineKeyboardButton(text="ü§ñ–ë–æ—Ç—ã", callback_data="bots")
    button_cards = InlineKeyboardButton(text="üí≥–ö–∞—Ä—Ç—ã/–í—ã–≤–æ–¥", callback_data="cards")
    button_curator = InlineKeyboardButton(text="üó£Ô∏è–ö—É—Ä–∞—Ç–æ—Ä", callback_data="curator")
    button_profile = InlineKeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")

    keyboard.add(button_manuals, button_chat,button_work_bots, button_bots, button_cards, button_curator, button_profile)
    return keyboard

@dp.message_handler(commands="menu") #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/menu"
async def open_work_menu(call: types.CallbackQuery):
    confirm_status = db1.get_confirm_status(call.from_user.id)

    if confirm_status == 1:
        
        keyboard_work = create_work_menu_keyboard()
        
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é "–ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞" (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å)
        image_path = "banner_menu.jpg"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        with open(image_path, "rb") as image_file:
            await bot.send_photo(
                chat_id=call.from_user.id,
                photo=image_file,
                caption="–ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞ üîΩ",
                reply_markup=keyboard_work
            )
    elif confirm_status == 0:
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–∞–≤–µ–Ω 0, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await bot.send_message(
            chat_id=call.from_user.id,
            text="–í–∞–º –Ω—É–∂–Ω–æ –±—ã—Ç—å —á–ª–µ–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )



@dp.callback_query_handler(text_startswith=["nazad", "work_menu"]) #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–ó–∞–º–µ–Ω–∞ –Ω–∞ –ú–µ–Ω—é)
async def open_work_menu(call: types.CallbackQuery):
  
        await call.message.delete()

        keyboard_work = create_work_menu_keyboard()

        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é "–ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞" (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å)
        image_path = "banner_menu.jpg"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        with open(image_path, "rb") as image_file:
            await bot.send_photo(
                chat_id=call.from_user.id,
                photo=image_file,
                caption="–ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞ üîΩ",
                reply_markup=keyboard_work
            )

@dp.callback_query_handler(text_startswith= "delete_msg")  #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
async def delete_broadcast_callback(callback_query: types.CallbackQuery):
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message_handler(Command("adm"))
async def cmd_message(call: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1)
    button_msg = InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="adm_msg")
    button_card = InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É ", callback_data="adm_card")
    keyboard.add(button_msg,button_card)

    if call.from_user.id == admin_user_id:
        await bot.send_message(
            chat_id=call.from_user.id,
            text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:",
            reply_markup=keyboard)
    else:await bot.send_message(
            chat_id=call.from_user.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ",
            )
        


@dp.callback_query_handler(text_startswith="tools") #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
async def help_bots_callback(call: types.CallbackQuery):

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    keyboard = InlineKeyboardMarkup(row_width=1)
    button_bots = InlineKeyboardButton(text="‚öôÔ∏è –ë–æ—Ç—ã-–ø–æ–º–æ—â–Ω–∏–∫–∏ ", callback_data="help_bots")
    button_mats = InlineKeyboardButton(text="üì¶ –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",callback_data="materials" )
    button_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad")
    keyboard.add(button_bots,button_mats, button_back)

    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption="üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –≤ —Ä–∞–±–æ—Ç–µ:", reply_markup=keyboard)

@dp.callback_query_handler(text_startswith="help_bots") #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–æ—Ç—ã-–ø–æ–º–æ—â–Ω–∏–∫–∏"
async def help_bots_callback(call: types.CallbackQuery):
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    button_vid = InlineKeyboardButton(text="üñº–í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫", url="https://t.me/UASCUM_VideoBot")
    button_sms = InlineKeyboardButton(text="üì•–ü—Ä–∏–µ–º –°–ú–°", url="https://t.me/UASCUM_SmsBot")
    button_draw = InlineKeyboardButton(text="üñå–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–µ–∫–æ–≤", url="https://t.me/UASCUM_DrawBot")
    button_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad")
    keyboard.add(button_vid, button_sms, button_draw, button_back)

    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption="üõ† –ë–æ—Ç—ã-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á:", reply_markup=keyboard)

@dp.callback_query_handler(text_startswith="materials") #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
async def help_bots_callback(call: types.CallbackQuery):
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    button_vid = InlineKeyboardButton(text="üñº–ü–∞–∫ –¥–µ–≤—É—à–µ–∫", url="https://t.me/+5rSuHdQo9KNjMzQy")
    button_sms = InlineKeyboardButton(text="üì•–ü–∞–∫ —á–∞—Ç–æ–≤", url="https://t.me/+Hc-adGmAFco0MmI6")
    button_draw = InlineKeyboardButton(text="üñ•–°–æ—Ñ—Ç—ã", callback_data="softs_help")
    button_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad")
    keyboard.add(button_vid, button_sms, button_draw, button_back)

    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption="üõ† –ë–æ—Ç—ã-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á:", reply_markup=keyboard)

@dp.callback_query_handler(text_startswith="bots") #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–æ—Ç—ã"
async def help_bots_callback(call: types.CallbackQuery):
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    button_apteka = InlineKeyboardButton(text="üíä–ù–∞—Ä–∫–æ –±–æ—Ç –†–£", url= "https://t.me/AptekaShop_robot")
    button_aptekaBY = InlineKeyboardButton(text="üíä–ù–∞—Ä–∫–æ –±–æ—Ç –†–ë", url= "https://t.me/AptekaShopBY_robot")
    button_logs = InlineKeyboardButton(text="üîë–°–∫—É–ø–∫–∞ –ª–æ–≥–æ–≤ –±–æ—Ç", url= "https://t.me/LoginKeysRobot")
    button_gun = InlineKeyboardButton(text="üèπ–û—Ä—É–∂–µ–π–∫–∞ –∫–∞–Ω–∞–ª", url= "https://t.me/travmat_sd")
    button_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data = "nazad")

    keyboard.add(button_apteka, button_aptekaBY, button_logs, button_gun, button_back)

    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption="ü§ñ –ù–∞—à–∏ —Å–∫–∞–º –±–æ—Ç—ã/–ø—Ä–æ–µ–∫—Ç—ã:", reply_markup=keyboard)
    
@dp.callback_query_handler(text_startswith="cards")   #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ä—Ç—ã" 
async def cards_callback(call: types.CallbackQuery):
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è card –∏ fio –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    card = db1.get_card()
    fio = db1.get_fio()

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    keyboard = InlineKeyboardMarkup(row_width=1)
    button_pay = InlineKeyboardButton(text="üí∏–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ª–∞—Ç—É", url="https://t.me/ua_sc_sy")
    button_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad")
    keyboard.add(button_pay, button_back)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π card –∏ fio
    message_text = f"üí≥ –ö–∞—Ä—Ç—ã –ø–æ–¥ –ø—Ä–∏–µ–º –ø—Ä—è–º—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:\n\n–ö–∞—Ä—Ç–∞: {card}\n–§–ò–û: {fio}\n\n‚ñ´Ô∏è–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—Ç–µ —á–µ–∫ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –Ω–∏–∂–µ!"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=message_text, reply_markup=keyboard)

@dp.callback_query_handler(text_startswith="curator") #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä–∞—Ç–æ—Ä"
async def help_bots_callback(call: types.CallbackQuery):
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    button_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data = "nazad")
    keyboard.add(button_back)

    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption="üó£ –í—ã–±–µ—Ä–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞ —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:", reply_markup=keyboard)

@dp.callback_query_handler(text_startswith="profile") #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
async def help_bots_callback(call: types.CallbackQuery):
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    button_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data = "nazad")
    keyboard.add(button_back)

    await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=keyboard)



#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"
@dp.callback_query_handler(text="adm_card")
async def callback_adm_card(call: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if call.from_user.id == admin_user_id:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MyDialog.set_card
        await Mydialog4.set_card.set()
    else:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

@dp.message_handler(state=Mydialog4.set_card)
async def set_card(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
    card = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db1.add_card(user_id=1, card=card)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –§–ò–û
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    await state.update_data(card=card)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MyDialog.fio
    await Mydialog5.fio.set()

@dp.message_handler(state=Mydialog5.fio)
async def set_fio(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –§–ò–û
    fio = message.text

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    card = data.get('card')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db1.add_fio(user_id=1, fio=fio, card=card)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")



#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.callback_query_handler(text="adm_msg")
async def callback_adm_msg(call: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if call.from_user.id == admin_user_id:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MyDialog6.message
        await Mydialog6.message.set()
    else:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

@dp.message_handler(state=Mydialog6.message)
async def process_message(message: Message, state: FSMContext):

    keyboard = types.InlineKeyboardMarkup()
    button_delete = types.InlineKeyboardButton("‚ô®Ô∏è–£–±—Ä–∞—Ç—å", callback_data="delete_msg")
    keyboard.add(button_delete)

    text_for_broadcast = message.text
    users = db1.get_all_users()

    for user_id in users:
        await bot.send_message(user_id, text_for_broadcast, reply_markup=keyboard)

    await state.finish()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


     
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
